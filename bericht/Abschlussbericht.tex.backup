
\documentclass[a4paper]{article}

\usepackage[ngerman]{babel}
\usepackage[utf8]{inputenc}
\usepackage{longtable}
\usepackage{graphicx}
\usepackage{graphics}
\usepackage[pdfborder={0 0 0}]{hyperref}
\usepackage{geometry}
\usepackage{fancyhdr}


\geometry{a4paper, left=30mm, right=20mm,top=25mm,bottom=25mm}
	\fancyhead{}
	\fancyhead[L]{Tom Wegener, 15MI2B}
	\fancyhead[R]{Abschlussbericht SWP}
	\fancyfoot{}
	\fancyfoot[R]{\thepage}

\setlength{\parindent}{0em}


\begin{document}

\pagestyle{empty}

\tableofcontents

\newpage

\pagestyle{fancy}


\section{Arbeitspakete}

\subsection{Aufstellung der Arbeitspakete mit Zeit}
\begin{longtable}{p{1.3cm}|p{6cm}|p{6cm}|l}
	   & Arbeitspaket 						& Bereich 			& benötigte Zeit\\
   \hline  \hline
   \#  140 & Unterschied zur Konkurrenz 				& Recherche			&  4h  0min 	\\ \hline
   \#  167 & Aufgabe 3: Entwurfsmuster (MVVM) 				& Recherche			&  8h  0min 	\\ \hline
   \#  549 & Stundenplan von der HTWK abfragen (Ruby)			& Recherche und Programmierung	& 10h 30min	\\ \hline
   \#  866 & Verbesserung der Website					& Front-End-Programmierung	&  7h  0min	\\ \hline
   \# 1018 & Erstellen der Konfigurationsdatei				& Back-End-Programmierung	&  1h 30min	\\ \hline
   \# 1019 & Einlesen der Datei						& API-Programmierung		&  9h  0min	\\ \hline
   \# 1020 & Einbinden der Konfigurationsdatei in die API		& API-Programmierung		&  1h  0min	\\ \hline
   \# 1023 & Erweiterung der Einlesefunktion				& API-Programmierung		&  0h 15min	\\ \hline
   \# 1024 & Bereitstellen einer API-Funktion				& API-Programmierung		&  0h 15min	\\ \hline
   \# 1259 & BugFix/Aufräumen: Website					& Front-End-Refactoring/Bugfixing&  1h  0min	\\ \hline
   \# 1495 & Erstellen der Diashow					& Front-End-Programmierung	&  7h 30min	\\ \hline
   \# 1618 & Erstellen der Diashow					& Front-End-Programmierung	&  2h  0min	\\ \hline
   \# 1620 & Website grau umranden					& Front-End-Design		&  5h  0min	\\ \hline
   \# 1655 & Erstellen der Liste					& Front-End-Programmierung	&  2h  0min	\\ \hline
   \# 1656 & Anzeige aktueller Reservierung				& Front-End-Programmierung	&  1h  0min	\\ \hline
   \# 1657 & Anzeige News als Diashow					& Front-End-Programmierung	&  0h 30min	\\ \hline
   \# 1658 & Erstellen des Kreises für die Anzeige des Raumnamens	& Front-End-Design		&  1h  0min	\\ \hline
   \# 1710 & Überarbeitung/Vereinfachung Website			& Front-End-Refactoring/Bugfixing& 13h  0min	\\ \hline
   \# 1868 & Überarbeitung/Vereinfachung Website			& Front-End-Refactoring/Bugfixing& 10h  0min	\\ \hline
   \# 2071 & Test der Website in versch. Browsern (Safari/Edge)		& Testen			&  0h 30min	\\ \hline
   \# 2078 & Vervollständigung der Namensfunktion			& Front-End-Programmierung	&  1h  0min	\\ \hline
   \# 2079 & Testen von Räumen verschiedener Gebäude			& Testen			&  1h  0min	\\ \hline
   \# 2080 & Hinzufügen von mehr Räumen					& Konfigurationsdatei		&  1h  0min	\\ \hline
   \# 2100 & Ermöglichen des  Tageswechsels im Js			& Front-End-Programmierung	&  3h  0min	\\ \hline
   \# 2144 & fehlende Anzeige verschiedener Belegungen			& Front-End-Bugfixing		&  2h  0min	\\ \hline
   \# 2194 & Implementierung in die wochenplan.js			& Front-End-Programmierung	&  9h  0min	\\ \hline
   \# 2271 & Raumauswahl-Popup: Wahl des Geutebrück-Baus möglich	& Front-End-Bugfixing		&  0h 25min	\\ \hline
   \# 2295 & Ermöglichen der Laborauswahl				& Front-End-Programmierung	&  4h  0min	\\ \hline
   \# 2297 & Runder Button zur Raumanzeige				& Front-End-Design		&  1h 30min	\\ \hline
   \# 2303 & Bugs im Wochenplan						& Front-End-Bugfixing		&  0h 30min	\\ \hline
   \# 2304 & Vergrößerung der Seitenleiste				& Front-End-Bugfixing		&  0h 15min	\\ \hline
   \# 2305 & keine neue Anzeige bei Raumwechsel				& Front-End-Bugfixing		&  0h 30min	\\ \hline
   \# 2311 & Erstellung des Posters					& Posterdesign			&  8h  0min	\\
 \end{longtable}
 
\newpage


\subsection{Aufstellung der Arbeitspakete mit Ergebnis}

\begin{longtable}{p{1.3cm}|p{14cm}l}
	   & Ergebnis\\
   \hline  \hline
   \#  140 & Dokument mit einer Aufstellung wieviel und welche Konkurrenz zu dem Produkt vorhanden ist\\ \hline
   \#  167 & Dokument mit einer Zusammenfassung was das Entwurfsmuster MVVM ist\\ \hline
   \#  549 & Recherche, wie es möglich wäre den Stundenplan der HTWK mit Hilfe einer Ruby-Applikation abzufragen\\ \hline
   \#  866 & umgestaltete und aufgeräumte Website\\ \hline
   \# 1018 & Eine Konfigurationsdatei im xml-Format\\ \hline
   \# 1019 & Einlese-Funktion für die xml-Datei per xml-Parsing\\ \hline
   \# 1020 & Übernahme der Einstellungen in das Programm\\ \hline
   \# 1023 & Räume können nun auch in der Konfigurationsdatei eingestellt werden\\ \hline
   \# 1024 & Controller zum Abrufen der Raumliste\\ \hline
   \# 1259 & geordneter Code in der Website, dokumentiertes JavaScript\\ \hline
   \# 1495 & Dia-Show für die Raumansicht\\ \hline
   \# 1618 & Dia-Show für die Raumansicht\\ \hline
   \# 1620 & graue Umrandung der Website\\ \hline
   \# 1655 & Erstellen der Liste zur Raumansicht\\ \hline
   \# 1656 & Aktuelle/laufende Reservierung wird seperat angezeigt\\ \hline
   \# 1657 & Dia-Show bei der Newsansicht\\ \hline
   \# 1658 & Button in dem der aktuelle Raum steht\\ \hline
   \# 1710 & Überarbeiteter, Dokumentierter und refactorisierter JavaScript-Code\\ \hline
   \# 1868 & Überarbeiteter, Dokumentierter und refactorisierter JavaScript-Code\\ \hline
   \# 2071 & Browserkompatibilität getestet\\ \hline
   \# 2078 & Alle Gebäude werden jetzt mit ganzen Namen angezeigt\\ \hline
   \# 2079 & Flexibilität wurde getestet\\ \hline
   \# 2080 & Geutebrück-Bau wurde zu Testzwecken hinzugefügt\\ \hline
   \# 2100 & Wechsel des Tages in der Raumansicht ist Front-End-seitig ermöglicht\\ \hline
   \# 2144 & Fehler in der Anzeige wurden behoben\\ \hline
   \# 2194 & Anzeige des Stundenplans für einen Raum als Wochenansicht\\ \hline
   \# 2271 & Fehler beheben\\ \hline
   \# 2295 & Die Raumauswahl ist auch in der Wochenansicht möglich\\ \hline
   \# 2297 & Der Runde Kreis zur Raumanzeige ist wieder implementiert\\ \hline
   \# 2303 & Im Wochenplan kann nichts mehr verändert werden\\ \hline
   \# 2304 & Die Seitenleiste verändert nicht mehr ihre Größe\\ \hline
   \# 2305 & Ein Bug wurde gefixt\\ \hline
   \# 2311 & Das Poster wurde in Absprache mit dem Team erstellt und mit Inhalt befüllt.\\
 \end{longtable}
 
 
\newpage

\section{Projektverlauf}
\subsection{Aufzählung}
%Erzeuge eine Aufzählung
\begin{itemize}
	%Erzeuge einen Stichpunkt
	\item Erster Punkt
	\item Zweiter Punkt
	\item Dritter Punkt
	%Erzeuge erste Schachtelungsebene
	\begin{itemize}
		\item Erster Punkt
		\item Zweiter Punkt
		\item Dritter Punkt
		%Erzeuge zweite Schachtelungsebene
		\begin{itemize}
			\item Erster Punkt
			\item Zweiter Punkt
			\item Dritter Punkt
			%Erzeuge dritte Schachtelungsebene (Maximum)
			\begin{itemize}
				\item Erster Punkt
				\item Zweiter Punkt
				\item Dritter Punkt
			\end{itemize}
		\end{itemize}
	\end{itemize}
\end{itemize}

\section{Sprintbericht zum 1. Sprint}
\subsection{Kurzzusammenfassung}
Das Ziel des ersten Programmier-Sprints, der vom 28.11.2016 bis zum 09. 12.2016 ging, war es, den Stundenplan auf einer ersten Testwebsite darzustellen, sowie erste Recherchen zur späteren 
Implementierung von Funktionen anzufertigen, das solllte dadurch erreicht werden, dass eine Website als Grundgerüst angefertigt und ein Datenbankshema vorbereitet wird.
Außerdem sollte am Sprint-Ende die Entscheidung zwischen Rails und Spring als Framework getroffen werden, dafür wurden verschiedene Tasks so eingeteilt, 
dass Recherche und Vorbereitung für Ruby und Spring erarbeitet werden. Außerdem wurde angefangen eine Möglichkeit zu erarbeiten, wie der Stundenplan von den HTWK-Servern abgefragt werden kann.
Während dieses Sprints musste eine erste Hürde überwinden werden, da der Product-Owner weggefallen ist, diese Lücke wurde aber gut von den anderen beiden Master-Studenten geschlossen, 
außerdem sind einige Studierende entweder von Anfang an gar nicht erst erschienen oder haben während des Sprints das Projekt abgebrochen.
Am Ende des Sprints wurde zwischen den Frameworks abgestimmt und es wurde sich für Spring entschieden, des Weiteren wurde ein Großteil der Tickets 
rejected, da die Funktionalität nicht immer vollständig gegeben war und die Zusammenarbeit noch nicht so gut funktioniert hatte, dadurch konnte das Sprintziel auch nicht erreicht werden.

\subsection{Bericht}
\subsubsection{Sprint-Planning}
In dem Sprint-Planning am 28.112016 wurden das Ziel dieses Sprints festgelegt, es sollte am Ende eine erste Test-Website stehen und diese mit dem richtigen Stundenplan zu befüllt sein. 
Außerdem sollten noch Informationen zu dem LogIn-Verfahren ``Shibboleth'' eingeholt werden und am Ende sollte die Entscheidung zwischen den beiden Frameworks Ruby on Rails und Spring 
(mit Java als Programmiersprache) getroffen werden. Dementsprechend mussten für beide Sprachen und Frameworks Recherchen angestellt werden, wie der Stundenplan von der Website der 
HTWK am Besten in einer Datenbank gespeichert werden kann und dann von der Website abgefragt und angezeigt werden kann. Dafür gab es unter der 
User-Story ``Anzeige Stundenplan'' die Tickets ``Einrichtung Projektarchiv'', ``Stundenplan von HTWK abfragen'', ``Auslesen des Stundenplans'', 
``Speichern des Stundenplans in Datenbank'', sowie Bereitstellung Stundenplan über REST-API`` jeweils einmal für Ruby on Rails und einmal für Java/Spring. Außerdem gab es die Tickets 
''Erstellung Grundgerüst Website`` und ''>Verbesserung der Website/Darstellung Stundenplan`` und ''Anfrage an eine REST-API aus Website`` für eine Anzeige auf der Website. 
Die Datenbank sollte mit den Tickets ''Entwurf eines Datenbankschemas``, ''Einrichten einer Datenbank`` und ''Dokumentation Datenbankschema`` erarbeitet werden. 
Das letzte Ticket der User-Stry war das ''Bereitstellen einer Testumgebung``, damit die Website auch immer getestet werden kann.

\subsubsection{Erster Teil des Sprints}
Im ersten Teil des Sprints wurden von den verschiedenen Team-Mitgliedern erstmal Tasks ausgewählt, es wurde auch angefangen, sich über verschiedene Tools zu informieren, 
die für die jeweilige Aufgabe notwendig sind. Aufgrund der kurzen Zeit bis zum nächsten Meeting wurde nicht mehr geschafft.

\subsubsection{Erstes Sprint-Meeting}
Im ersten Sprint-Meeting, am 30.11.2017, haben dann alle über ihren Fortschritt berichtet, der aufgrund der Kürze der Barbeitungszeit noch nicht so groß war.
Allerdings wurden verschiedene Tools weiterempfohlen, wie z.B. das PlugIn Http-Requester für den Browser FireFox, mit dem die Recherche nach einer Lösung der Stundenplanabfrage erleichtert werden sollte.
Außerdem wurde festgestellt, dass für einen Test ohne einen Server im HTWK-Rechenzentrum stehen zu haben eine virtuelle Maschine sinnvoll wäre.
Des Weiteren wurde für die Mitglieder, die sich mit den Tasks mit Java auseinandersetzten, der Tipp gegeben, dass als Build-Management-Tool entweder Maven oder Gradle benutzt werden soll und 
es wurde betont, dass eine schnelle Bereitstellung der Datenbank für das Projekt hilfreich wäre.
Am Ende wurden nochmal verschiedene Sachen für das Git erklärt.

\subsubsection{zweiter Teil des Sprints}
Im zweiten Teil des Sprints haben Herr Rittig und ich im ständigen Austausch das System hinter dem Stundenplan der HTWK erarbeitet und haben an der Realisierung mit der jeweiligen Sprache gearbeitet, 
was für mich bedeutete, dass ich mich möglichst zielgerichtet in Ruby on Rails einarbeiten musste. Außerdem wurden die Projek-Archive für Ruby und Spring erstellt.

\subsubsection{Zweites Sprint-Meeting}
Das zweite Sprint-Meeting fand am 06.12.2017 statt, in diesem Meeting ging es um das Kundengespräch, sowie unsere Fortschritte und die Tatsache, dass der Product-Owner abgesprungen ist
Kundenmeeting
Miteinbeziehung der Bachelor in Product-Owner Aktivitäten möglich (falls nötig)
Sprint-Reviews: Erik Siegert: Software-Architekt / Julian Götz: Product-Owner
Möglichkeit der Buchung von Räumen für einen oder mehrere Blöcke
Beschränkung auf Buchung der PC-Pools
Anzeige Liste der Räume
Raum-Detailansicht (Anzeige der Belegungen für Tag, Woche, ... )
Wunsch des Kunden: Oben Anzeige der aktuellen Belegung, unten eine Art Diashow der nächsten Belegungen
Login für Buchung nötig (Shibboleth)
auf SOPRA Teams beschränkt
kein Reservierungsübereifer, dh nur max. 1 Raum pro Team/Person
News-Anzeige, um die Idee von Croows ein wenig aufzugreifen:
Neuigkeiten der PC-Pools & der Studenten
in Pools: Anzeige verkürzter Ansicht + QR Code zu Details
Nutzung einer Konfigurationsdatei, zur Einstellung der
Anzahl möglicher Buchungen
Buchungszeiträume
bspw bis x Stunden/Minuten vor Block
maximal x Tage im Voraus
Unterschiedliche Login-Rechte
Professoren haben bspw. mehr Rechte als Studenten
andere Buchungszeiträume, Anzahl Buchungen, ...
Anzeige des Stundenplans: Nice-To-Have
Platzierung: eventuell in Vitrine in PC-Pools (wg. Diebstahl etc)
Buchung über Smartphone/PC muss möglich sein -> responsive Website
Zusätzliche Fragen
Ist ein Server verfügbar?
an Herrn Petters wenden ( Administration PC Pools IMN, Li104 )
Gibt es eine offizielle API, die unser Server für Stundenplan/Raumplan nutzen kann?
an Herrn Tölg wenden ( E111 )
Verfügbarkeit Raspberry Pi + Touchscreen:
Noch nicht bestellt. Falls Platzierung in Vitrine in den Pools -> kein Touchscreen, nur Anzeige

Zweites Meeting
Zuerst hatte jeder über seinen Fortschritt berichtet. Dabei wurden die Fragen beantwortet.
Was habe ich bis jetzt gemacht?
Was habe ich bis zum nächsten Meeting geplant?
Was traten für Probleme auf?
Ergebnisse:
Es wurde sich über Shibboleth informiert, Attribute die man abfragen muss sind unklar
Website Tabelle wird schon angezeigt, Termine eintragen funktioniert schon
Datenbank nicht da, Entwurf eines Datenbankschemas, bis Freitag wird das noch erweitert
Datenbankdokumentation wurde gemacht
Api zur Verfügung gestellt in Ruby, Schwierigkeiten vorhanden
Stundenplanabfrage über Ruby, Probleme sind vorhanden, HTTP Requester was abgefragt werden muss funktioniert, noch keine Methode für Ruby vorhanden
Raumplan kann schon abgefragt werden (HTTP Requester), noch keine Methode für Spring vorhanden
Weiterhin hat sich noch herausgestellt:
mit Weicker: wie verfahren ohne Produktowner → Sprintreview, Julian ist Produktowner, oder wir selber
Protokoll mit neuen Produkt-Anforderungen ins Git geladen
Server verfügbar? Li 104 Ansprechpartner, Server windows oder linux? → aussuchen
API Ansprechpartner→ e 111
Respberry Pi noch nicht zur Verfügung
zu allen Tickets wurden noch mal die Anforderungen durchgegangen
Zeit immer gleich Buchen
Develop-Branch und Doku-Branch sollen zusammengefügt werden→ Dokuordner wird aufgeräumt
Kritik an den Tasks, was soll gemacht werden? → Schwierigkeiten, deshalb wieder alle zusammen die Tasks formulieren? Reiche 90 min?
Was weiter machen? Ruby oder Spring? Entscheidung bis Freitag 09/12/2016
Freitag Sprintreview → Was ist gut, was ist schlecht gelaufen?
Abhängigkeiten von Tasks müssen besser geplant werden
Jeder soll nach dem ersten Sprint wissen was er zu tun hat und wie die anderen Tasks ungefähr aussehen
Termin für Zusammenarbeit am Projekt --> 15/12/2016, 17;15 Uhr

\subsubsection{Dritter Teil des Sprints}
\subsubsection{Sprint-Review}
Als erstes war das Sprint Review dran, in dem die Tasks besprochen und anschließend rejected oder angenommen (also auf Closed gesetzt) wurden.
543 [Closed] Projectarchiv Spring eingerichtet
544 [Closed] Projektarchiv Ruby eingerichtet
545 [Closed] Grundgerüst für responsive Website erstellt
547 [Rejected] War nicht rechtzeitig zum Sprintende im Git
548 [Rejected] Funktionalität nicht vollständig vorhanden
549 [Rejected] Funktionalität nicht vollständig vorhanden
550 [Closed] Datenbankschema wurde entworfen
551 [Closed] Dokumentation für das Datenbankschema wurde erstellt
552 [Rejected] Funktionalität nicht vollständig vorhanden
553 [Rejected] Funktionalität nicht vollständig vorhanden [554] [Rejected] Funktionalität nicht vollständig vorhanden
556 [Rejected] Funktionalität nicht vollständig vorhanden
560 [Rejected] Funktionalität nicht vollständig vorhanden
561 [Rejected] Funktionalität nicht vollständig vorhanden

\subsubsection{Sprint-Retrospektive}
Positives:
Anwesenheit
Online-Meeting: Erik's Angebot, am Wochenende Fragen von uns im Teamspeak zu beantworten
Protokolle super
Master hilfsbereit
Keine Probleme mit Git gehabt
Mitarbeit und Motivation
angenehme Atmosphäre
Negatives:
Ticketabhängigkeit nicht immer verständlich bzw. nicht immer beachtet
Aufwand der Tickets unterschätzt
Erstellen neuer Branches hat nicht jeder mitbekommen
Ticketbeschreibungen zu kurz/ungenau
zu spätes Pushen ins Git
zu wenig Vorbereitung für wichtige Abstimmungen (Ruby vs. Spring)
Sonsitges:
Git umbauen
Protokolle etc. ohne .tex Dateien hochladen, also nur die PDFs
Treffen im Noels vor Weihnachten, Umfrage im Slack





Meetings, UserStories, Arbeitspakete, Bearbeiter der Arbeitspakete, Planungs- Review- und Retro-Ergebnisse, Probleme, Entscheidungen

\begin{enumerate}
	%Erzeuge einen Stichpunkt
	\item Erster Punkt
	\item Zweiter Punkt
	\item Dritter Punkt
	%Erzeuge erste Schachtelungsebene
	\begin{enumerate}
		\item Erster Punkt
		\item Zweiter Punkt
		\item Dritter Punkt
		%Erzeuge zweite Schachtelungsebene
		\begin{enumerate}
			\item Erster Punkt
			\item Zweiter Punkt
			\item Dritter Punkt
			%Erzeuge dritte Schachtelungsebene (Maximum)
			\begin{enumerate}
				\item Erster Punkt
				\item Zweiter Punkt
				\item Dritter Punkt
			\end{enumerate}
		\end{enumerate}
	\end{enumerate}
\end{enumerate}

\section{Reflektion des Lernprozesses}

Selbsteinschätzung wesentlicher gelernter Dinge, vor Allem Soft-Skills


\subsection{Zeilenumbruch}
	%\\ bezeichnet einen Zeilenumbruch (alternativ \newline)
	Hier findet ein Zeilenumbruch \\ statt.
\subsection{Absatz}
	%\\ \\ dementsprechend einen Absatz
	A
	Hier steht ein \\ \\ Absatz.
	B
\subsection{Textformatierungen}
	%Schriebt einen Text Fett
	\textbf{Ich bin ein fettgedruckter Text} \\ 
	\textit{Ich bin ein kursiver Text}\\
	\textsl{Ich bin ein schräger Text}\\
	\emph{Ich bin ein hervorgehobener Text}\\
	\texttt{Ich bin in Schreibmaschine geschrieben}\\
	\textsc{Ich bin in Kapitälchen geschrieben}\\



%Hier endet das eigentliche Dokument
\end{document}